.calculator:has(:checked) {
    opacity: 0 !important;
    z-index: -1 !important;
}

.calculator:first-child:not(:has(:checked)),
.calculator:has(:checked) + .calculator:not(:checked) {
    opacity: 1;
    z-index: 1;
}

/* Hide current operator labels */
.calculator:has([name^='operator']:checked) + .calculator label:has([name^='operator']),
/* Transition */
.calculator:has([name^='operator']:checked) + .calculator:not(:has(:checked)) + .calculator label:has([name^='operator']),

/* Hide current operator labels for first selection */
.calculator:first-child:not(:has(:checked)) label:has([name^='operator'],[name^='A/C']),
/* Transition */
.calculator:first-child:not(:has(:checked)) + .calculator label:has([name^='operator'],[name^='A/C']),

/* 0 Can't be used as the first value */
.calculator:first-child:not(:has(:checked)) label:has(input[value='0']),
/* Transition */
.calculator:first-child:not(:has(:checked)) + .calculator label:has(input[value='0']),

/* 0 Can't be used as the first value after a '/' operator */
.calculator:has([name^='operator'][value='/']:checked) + .calculator label:has(input[value='0']),
/* Transition */
.calculator:has([name^='operator'][value='/']:checked) + .calculator:not(:has(:checked)) + .calculator label:has(input[value='0']),

/* = Can't be used unless there has been at least 1 operator and at least a number after it */
.calculator:has([name^='operator']:checked) + .calculator:not(:has([name^="number"]:checked)) + .calculator label:has(input[value='=']),
/* Transition */
.calculator:has([name^='operator']:checked) + .calculator:not(:has([name^="number"]:checked)) + .calculator + .calculator label:has(input[value='=']),

/* User pressed '=' */
body:has(.calculator [value="="]:checked) .calculator label:not(:has([value="A/C"])),

/* User used up all calculators */
.calculator:nth-last-child(2):has( :checked) + .calculator label:not(:has([value="A/C"])) {
    pointer-events: none;
    opacity: 0.36;
}

body:has(.calculator:nth-last-child(2) :checked) .overflow-error {
    opacity: 1;
}

/* Performance improvements */
.calculator:first-child ~ .calculator:has(:checked),
.calculator:where(:has(:checked), :first-child) + .calculator:not(:has(:checked)) + .calculator ~ .calculator {
    display: none;
}
